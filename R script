#R script f
#Brief Experiment Background: 
#n=3 healthy controls and n=3 PsA patients  
#PBMCs were subjected to BD Rhapsody single-cell RNA seq.
###############################################################################

#packages 
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("Matrix")
install.packages("RCurl")
install.packages("scales")
install.packages("data.table")
install.packages("readxl")
install.packages("BiocManager")
install.packages("ggpubr")
install.packages("Seurat")
BiocManager::install("ensembldb")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("clusterProfiler")
BiocManager::install("biomaRt")
BiocManager::install("enrichplot")
BiocManager::install("AnnotationHub")

library(tidyverse)
library(Seurat)
library(BiocManager)
library(Matrix)
library(RCurl)
library(readxl)
library(scales)
library(ggpubr)
library(data.table)
library(AnnotationHub)
library(ensembldb)
library(HGNChelper)
library(clusterProfiler)
library(AnnotationDbi)
library(biomaRt)
library(enrichplot)
library(ggplot2)
library(data.table)


#Data import
expMat_C1 <- ReadMtx(mtx = "C1 matrix.mtx", cells = "C1 barcodes.tsv", features = "C1 features.tsv",
                     cell.column = 1, feature.column = 2,
                     cell.sep = "\t", feature.sep = "\t",
                     skip.cell = 0, skip.feature = 0,
                     mtx.transpose = FALSE, unique.features = TRUE)

expMat_C1[1:5,1:5]

rna_C1 <- Seurat::CreateSeuratObject(counts = expMat_C1,
                                     min.cells = 0, min.features = 0, assay = "RNA")
rna_C1@meta.data %>% head()

smk_C1 <- fread(file = "C1 sample tag.csv", sep = ",", header = TRUE) %>%
  data.frame(row.names = 1)

smk_C1[1:5,]

rna_C1 <- AddMetaData(object = rna_C1, metadata = smk_C1)
rna_C1@meta.data %>% head()

expMat_C2 <- ReadMtx(mtx = "C2 matrix.mtx", cells = "C2 barcodes.tsv", features = "C2 features.tsv",
                     cell.column = 1, feature.column = 2,
                     cell.sep = "\t", feature.sep = "\t",
                     skip.cell = 0, skip.feature = 0,
                     mtx.transpose = FALSE, unique.features = TRUE)
expMat_C2[1:5,1:5]
rna_C2 <- Seurat::CreateSeuratObject(counts = expMat_C2,
                                     min.cells = 0, min.features = 0, assay = "RNA")
rna_C2@meta.data %>% head()
smk_C2 <- fread(file = "C2 sample tag.csv", sep = ",", header = TRUE) %>%
  data.frame(row.names = 1)
smk_C2[1:5,]

rna_C2 <- AddMetaData(object = rna_C2, metadata = smk_C2)
rna_C2@meta.data %>% head()

expMat_C3 <- ReadMtx(mtx = "C3 matrix.mtx", cells = "C3 barcodes.tsv", features = "C3 features.tsv",
                     cell.column = 1, feature.column = 2,
                     cell.sep = "\t", feature.sep = "\t",
                     skip.cell = 0, skip.feature = 0,
                     mtx.transpose = FALSE, unique.features = TRUE)

expMat_C3[1:5,1:5]
rna_C3 <- Seurat::CreateSeuratObject(counts = expMat_C3,
                                     min.cells = 0, min.features = 0, assay = "RNA")
rna_C3@meta.data %>% head()

smk_C3 <- fread(file = "C3 sample tag.csv", sep = ",", header = TRUE) %>%
  data.frame(row.names = 1)

smk_C3[1:5,]

rna_C3 <- AddMetaData(object = rna_C3, metadata = smk_C3)
rna_C3@meta.data %>% head()

Idents(rna_C3) <- rna_C3@meta.data$Sample_Name
Healthy_C3 <- subset(rna_C3, idents = "HC3")
PSA_C3 <- subset(rna_C3, idents = "PSA3")

Healthy_C3$Sample_Name <- "HC"
Healthy_C2$Sample_Name <- "HC"
Healthy_C1$Sample_Name <- "HC"
PSA_C1$Sample_Name <- "PSA"
PSA_C2$Sample_Name <- "PSA"
PSA_C3$Sample_Name <- "PSA"

PSAHC <- merge(Healthy_C1, y = c(Healthy_C2, Healthy_C3, PSA_C1, PSA_C2, PSA_C3),
               add.cell.ids = c("HC1", "HC2", "HC3", "PSA1", "PSA2", "PSA3"))

#Quality Control
PSAHC@meta.data %>%
  group_by(Sample_Name) %>%
  tally() %>%
  mutate(pct = n/sum(n)) %>%
  ggplot(aes(x=Sample_Name, y=n, fill= Sample_Name)) +
  geom_bar(stat = "identity") +
  geom_text(aes(y = n, 
                label= paste0(n, "\n", scales::percent(pct)),
                vjust= -0.5, size= 2.5), show.legend = FALSE) +
  theme_classic()

# remove multiplet and undetermines from downstream data 
PSAHC <- subset(PSAHC, subset = Sample_Name %in% c("Multiplet", "Undetermined"), invert = T)

# Quality control is to filter out cell labels that are of low quality, e.g. dead cells
PSAHC@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nCount_RNA")

PSAHC@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nFeature_RNA")

PSAHC@meta.data %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500, colour = "red") +
  geom_hline(yintercept = 300, colour = "red") +
  facet_wrap(~Sample_Name) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

# Seurat object 
filtered.PSAHC <- subset(x = PSAHC, subset = (nCount_RNA >= 1200) & (nCount_RNA <= 60000) & (nFeature_RNA >= 55) & (nFeature_RNA <= 200))
counts <- GetAssayData(JoinLayers(object = filtered.PSAHC, slot = "counts"))
nonzero <- counts > 0
keep_genes <- Matrix::rowSums(nonzero) >= 1
filtered_counts <- counts[keep_genes, ]

filtered.PSAHC <- CreateSeuratObject(filtered_counts,meta.data = filtered.PSAHC@meta.data)
filtered.PSAHC@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nCount_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nCount_RNA")

filtered.PSAHC@meta.data %>% 
  ggplot(aes(color=Sample_Name, x=nFeature_RNA, fill= Sample_Name)) + 
  geom_density(alpha = 0.2) + 
  scale_x_log10() + 
  theme_classic() +
  ylab("Cell density") +
  ggtitle("nFeature_RNA")

filtered.PSAHC@meta.data %>% 
  ggplot(aes(x=nCount_RNA, y=nFeature_RNA)) + 
  geom_point() + 
  scale_colour_gradient(low = "gray90", high = "black") +
  stat_smooth(method=lm) +
  scale_x_log10() + 
  scale_y_log10() + 
  theme_classic() +
  geom_vline(xintercept = 500, colour = "red") +
  geom_hline(yintercept = 300, colour = "red") +
  facet_wrap(~Sample_Name) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

# Cell Number
PSAHC@meta.data %>% 
  group_by(Sample_Name) %>% 
  dplyr::summarise(cell_number = length(Sample_Name))

integrate.filtered.PSAHC@meta.data %>% 
  group_by(Sample_Name) %>% 
  dplyr::summarise(cell_number = length(Sample_Name))

# Normalize
filtered.PSAHC <- NormalizeData(filtered.PSAHC, 
                                normalization.method = "LogNormalize")


# split the dataset into a list of two seurat objects (HC and PSA)
split.filtered.PSAHC <- SplitObject(filtered.PSAHC, split.by = "Sample_Name")

# normalize and identify variable features for each dataset independently
split.filtered.PSAHC <- lapply(X = split.filtered.PSAHC, FUN = function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})


# select features that are repeatedly variable across datasets for integration
integ.features <- SelectIntegrationFeatures(object.list = split.filtered.PSAHC, 
                                            nfeatures = 2000) 

# this command creates an 'integrated' data assay
anchors <- FindIntegrationAnchors(object.list = split.filtered.PSAHC,
                                  anchor.features = integ.features)

# Run the standard workflow for visualization and clustering
integrate.filtered.PSAHC <- IntegrateData(anchorset = anchors)
integrate.filtered.PSAHC <- ScaleData(integrate.filtered.PSAHC, verbose = FALSE)
integrate.filtered.PSAHC <- RunPCA(integrate.filtered.PSAHC, npcs = 50, verbose = FALSE)

ElbowPlot(integrate.filtered.PSAHC, ndims = 50)
integrate.filtered.PSAHC <- RunUMAP(integrate.filtered.PSAHC, 
                                    reduction = "pca", 
                                    dims = 1:20) #this is using the top 20 PCA

integrate.filtered.PSAHC <- FindNeighbors(integrate.filtered.PSAHC, 
                                          reduction = "pca", 
                                          dims = 1:20)

DimPlot(integrate.filtered.PSAHC, group.by = "Sample_Name")


#Clustering 
# Determine the K-nearest neighbor graph
integrate.filtered.PSAHC <- FindNeighbors(object = integrate.filtered.PSAHC, dims = 1:20)
# Determine the clusters for various resolutions
integrate.filtered.PSAHC<- FindClusters(object = integrate.filtered.PSAHC,
                                        resolution = c(0.2, 0.4, 0.6,  0.8, 1, 1.2, 1.4),
                                        verbose = F)
integrate.filtered.PSAHC@meta.data %>% 
  dplyr::select(contains("integrat")) %>% 
  map_int(~ unique(.x) %>% length)

install.packages("clustree")
library(clustree)

clustree(integrate.filtered.PSAHC, prefix = "integrated_snn_res.")
Idents(object = integrate.filtered.PSAHC) <- "integrated_snn_res.0.6"

#UMAP visualization
DimPlot(integrate.filtered.PSAHC,
        reduction = "umap",
        label = TRUE,
        label.size = 6)


#Marker Identification
library(tidyverse)
library(Seurat)
library(data.table)
library(ggpubr)
library(HGNChelper)
library(openxlsx)
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R"); source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")
gs_list <-  gene_sets_prepare("/Users/teganmctaggart/Desktop/unzipped rhapsody files/ScTypeDB_short.xlsx", "Immune system")
es.max <-  sctype_score(scRNAseqData = integrate.filtered.PSAHC@assays[["integrated"]]@scale.data, 
                        scaled = TRUE, 
                        gs = gs_list$gs_positive, 
                        gs2 = gs_list$gs_negative)

cL_resutls = do.call("rbind", lapply(unique(integrate.filtered.PSAHC@meta.data$integrated_snn_res.0.6), function(cl){
  es.max.cl = sort(rowSums(es.max[ ,rownames(integrate.filtered.PSAHC@meta.data[integrate.filtered.PSAHC@meta.data$integrated_snn_res.0.6==cl, ])]), decreasing = !0)
  head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(integrate.filtered.PSAHC@meta.data$integrate.filtered.PSAHC==cl)), 10)
}))

sctype_scores = cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)  

# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] = "Unknown"
integrate.filtered.PSAHC@meta.data$customclassif = ""

for(j in unique(sctype_scores$cluster)){
  cl_type = sctype_scores[sctype_scores$cluster==j,]}

integrate.filtered.PSAHC@meta.data$celltypes = ""

for(j in unique(sctype_scores$cluster)){
  cl_type = sctype_scores[sctype_scores$cluster==j,]; 
  integrate.filtered.PSAHC@meta.data$customclassif[integrate.filtered.PSAHC@meta.data$integrated_snn_res.0.6 == j] = as.character(cl_type$type[1]) }

integrate.filtered.PSAHC@meta.data$celltypes <- integrate.filtered.PSAHC@meta.data$customclassif

#AbSeq Dotplot (Fig. 1C)
DotPlot(integrate.filtered.PSAHC, 
        group.by = "celltypes",
        features = c("Tim3-HAVCR2-AHS0016-pAbO","IgM-IGHM-AHS0198-pAbO","IgD-IGHD-AHS0058-pAbO","HLA-DR-CD74-AHS0035-pAbO","GITR-TNFRSF18-AHS0104-pAbO","CXCR6-CXCR6-AHS0148-pAbO","CXCR5-CXCR5-AHS0039-pAbO","CD8:SK1-CD8A-AHS0228-pAbO","CD4:SK3-CD4-AHS0032-pAbO","CD3:UCHT1-CD3E-AHS0231-pAbO","CD28:L293-CD28-AHS0138-pAbO","CD27:M-T271-CD27-AHS0025-pAbO","CD279:EH12-1-PDCD1-AHS0014-pAbO","CD278-ICOS-AHS0012-pAbO","CD272-BTLA-AHS0052-pAbO","CD25:2A3-IL2RA-AHS0026-pAbO","CD19:SJ25C1-CD19-AHS0030-pAbO","CD196-CCR6-AHS0034-pAbO","CD183-CXCR3-AHS0031-pAbO","CD16:3G8-FCGR3A-AHS0053-pAbO","CD161:HP-3G10-KLRB1-AHS0205-pAbO","CD14:MPHIP9-CD14-AHS0037-pAbO","CD137-TNFRSF9-AHS0003-pAbO","CD134:ACT35-TNFRSF4-AHS0013-pAbO", "CD127-IL7R-AHS0028-pAbO","CD11c:B-LY6-ITGAX-AHS0056-pAbO", "CCR7-CCR7-AHS0273-pAbO", "CD62L:DREG-56-SELL-AHS0049-pAbO", "CD45RA:HI100-PTPRC-AHS0009-pAbO", "CD56:NCAM16.2-NCAM1-AHS0019-pAbO"),
        cols = "RdYlBu", 
        dot.scale = 6) + 
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(x = "clusters", y = "genes") +
  coord_flip()

# Removing Abseq
counts_trial <- GetAssayData(JoinLayers(integrate.filtered.PSAHC, assay = "RNA"))
counts_trial <- counts_trial[-(which(rownames(counts_trial) %in% c("IgD-IGHD-AHS0058-pAbO", "IgM-IGHM-AHS0198-pAbO", "Tim3-HAVCR2-AHS0016-pAbO", "CD45RA:HI100-PTPRC-AHS0009-pAbO", "CD4:SK3-CD4-AHS0032-pAbO", "CD56:NCAM16.2-NCAM1-AHS0019-pAbO", "CD62L:DREG-56-SELL-AHS0049-pAbO", "CD8:SK1-CD8A-AHS0228-pAbO", "CXCR5-CXCR5-AHS0039-pAbO", "CXCR6-CXCR6-AHS0148-pAbO", "GITR-TNFRSF18-AHS0104-pAbO", "HLA-DR-CD74-AHS0035-pAbO", "CD196-CCR6-AHS0034-pAbO", "CD19:SJ25C1-CD19-AHS0030-pAbO", "CD25:2A3-IL2RA-AHS0026-pAbO", "CD272-BTLA-AHS0052-pAbO", "CD278-ICOS-AHS0012-pAbO", "CD279:EH12-1-PDCD1-AHS0014-pAbO", "CD27:M-T271-CD27-AHS0025-pAbO", "CD28:L293-CD28-AHS0138-pAbO", "CD3:UCHT1-CD3E-AHS0231-pAbO", "CCR7-CCR7-AHS0273-pAbO", "CD11c:B-LY6-ITGAX-AHS0056-pAbO", "CD127-IL7R-AHS0028-pAbO", "CD134:ACT35-TNFRSF4-AHS0013-pAbO", "CD137-TNFRSF9-AHS0003-pAbO", "CD14:MPHIP9-CD14-AHS0037-pAbO", "CD161:HP-3G10-KLRB1-AHS0205-pAbO", "CD16:3G8-FCGR3A-AHS0053-pAbO", "CD183-CXCR3-AHS0031-pAbO"))),]
noabseq <- subset(integrate.filtered.PSAHC, features = rownames(counts_trial))
intergated.filitered.PSAHC.noabseq <- CreateSeuratObject(filtered_counts,meta.data = intergated.filitered.PSAHC.noabseq@meta.data)

if ('IgD-IGHD-AHS0058-pAbO' %in% rownames(intergated.filitered.PSAHC.noabseq)) {
  print("'IgD-IGHD-AHS0058-pAbO' gene is still present in the Seurat object.")
} else {
  print("'IgD-IGHD-AHS0058-pAbO' gene has been successfully removed from the Seurat object.")
}

#Heatmap of top 5 genes (Fig.1D)
pbmc.markers <- FindAllMarkers(JoinLayers(noabseq, only.pos = TRUE))
pbmc.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1)

pbmc.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_head(n = 5) %>%
  ungroup() -> top5

candidate_genes <- top5$gene

#(Fig.1D)
DoHeatmap(JoinLayers(noabseq), group.by= "celltypes", features = candidate_genes)

#Cell identity changed based on AbSeq expression and TOP5 gene heatmap 
sctype_scores[11, "type"] <- "Tregs"
sctype_scores[2, "type"] <- "Memory B cells"
sctype_scores[7, "type"] <- "CD8 CM"
sctype_scores[10, "type"] <- "CD8 EM"
sctype_scores[1, "type"] <- "CD4 CM"
sctype_scores[4, "type"] <- "CD4 EM"
sctype_scores[12, "type"] <- "CD16+ OCP"
sctype_scores[16, "type"] <- "Other"
sctype_scores[14, "type"] <- "CD8+ CD56+ T"

# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] = "Unknown"
integrate.filtered.PSAHC@meta.data$customclassif = ""

for(j in unique(sctype_scores$cluster)){
  cl_type = sctype_scores[sctype_scores$cluster==j,]}

integrate.filtered.PSAHC@meta.data$celltypes = ""

for(j in unique(sctype_scores$cluster)){
  cl_type = sctype_scores[sctype_scores$cluster==j,]; 
  integrate.filtered.PSAHC@meta.data$customclassif[integrate.filtered.PSAHC@meta.data$integrated_snn_res.0.6 == j] = as.character(cl_type$type[1]) }

integrate.filtered.PSAHC@meta.data$celltypes <- integrate.filtered.PSAHC@meta.data$customclassif

# (Fig. 1A)
DimPlot(integrate.filtered.PSAHC, reduction = "umap", label = TRUE, repel = TRUE, group.by = 'customclassif') + NoLegend()

# Frequency of cell types per sample (Fig.1B)
library(Seurat)
library(ggplot2)

table <- table(integrate.filtered.PSAHC@meta.data$integrated_snn_res.0.6, integrate.filtered.PSAHC@meta.data$Sample_Tag, integrate.filtered.PSAHC@meta.data$celltypes)
integrate.filtered.PSAHC.df <- as.data.frame(table)
colnames(integrate.filtered.PSAHC.df) <- c("cluster", "sample_tag", "id", "freq")

integrate.filtered.PSAHC.df$Freq_Percentage <- with(integrate.filtered.PSAHC.df, (freq / tapply(freq, sample_tag, sum)[sample_tag]))

ggplot(integrate.filtered.PSAHC.df, aes(x = sample_tag, y = Freq_Percentage, fill = factor(id))) +
  geom_bar(stat = "identity") +  # Use stat = "identity" to ensure bars represent the actual values
  labs(x = "Donors", y = "Frequency (%)", title = "Cluster Frequencies per Sample") +
  scale_y_continuous(labels = scales::percent_format()) +  # Format y-axis labels as percentages
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Feature Plot UMAP expression (Fig. 1E)
FeaturePlot(integrate.filtered.PSAHC, 
            reduction = "umap", 
            features = c("CD3G", "CD4", "CD8B","IL2RA","TBX21","RORC","FOXP3"), 
            order = TRUE,
            min.cutoff = 'q10', 
            label = FALSE)


# Violin plots (Fig. 1F-G, 2B-C, 3A, S6A,C)
integrate.filtered.PSAHC$celltype.name <- paste(integrate.filtered.PSAHC$Sample_Name, integrate.filtered.PSAHC$celltypes, sep = "_")
Idents(integrate.filtered.PSAHC) <- integrate.filtered.PSAHC@meta.data$celltype.name
VlnPlot(object = integrate.filtered.PSAHC,
        features = "TIGIT", 
        idents = c("HC_Tregs", "PSA_Tregs"), flip = T,
        log = T) + 
  stat_compare_means(comparisons = list(c("HC_Tregs", "PSA_Tregs")))

# Violin plots (Fig. S2)
VlnPlot(object = integrate.filtered.PSAHC,
        features = "TIGIT", 
        group.by = "Sample_Tag", flip = T,
        log = T) 

# Box Plot  (Fig. 2D-E)
library(Seurat)
library(ggplot2)
library(dplyr)
filtered_seurat <- subset(integrate.filtered.PSAHC, idents = c("HC_Tregs", "PSA_Tregs"))
data_subset <- FetchData(filtered_seurat, vars = c("FAS"))
data_subset$group <- Idents(filtered_seurat)

ggplot(data_subset, aes(x = group, y = FAS, fill = group)) +
  geom_boxplot() +
  geom_jitter() +
  scale_y_log10() + 
  labs(x = "Identity Group", y = "Expression") +
  theme_minimal() +
  stat_compare_means(comparisons = list(c("HC_Tregs", "PSA_Tregs")))  


# Differential gene expression analysis 
integrate.filtered.PSAHC$celltypes <- integrate.filtered.PSAHC$customclassif
integrate.filtered.PSAHC$celltype.name <- paste(integrate.filtered.PSAHC$Sample_Name, integrate.filtered.PSAHC$celltypes, sep = "_")
noabseq$celltype.name <- paste(noabseq$Sample_Name, noabseq$celltypes, sep = "_")

Idents(noabseq) <- "celltype.name"
Treg.de <- FindMarkers(JoinLayers(noabseq), 
                          ident.1 = "PSA_Tregs", 
                          ident.2 = "HC_Tregs", 
                          verbose = FALSE)
# (Fig. 2A, S5A-I)
Treg.de$diffexpressed <- "No Changed"
Treg.de$diffexpressed[Treg.de$avg_log2FC > 1 & Treg.de$p_val < 0.05] <- "Upregulated"
Treg.de$diffexpressed[Treg.de$avg_log2FC < -1 & Treg.de$p_val < 0.05] <- "Downregulated"

Treg.de$DElabel <- NA
Treg.de$gene <- row.names(Treg.de)
Treg.de$DElabel[Treg.de$diffexpressed != "NA"] <- Treg.de$gene[Treg.de$diffexpressed != "NA"]

library(ggrepel)
ggplot(data=Treg.de, aes(x=avg_log2FC, y=-log10(p_val), col=diffexpressed, label=DElabel)) +
  geom_point() + 
  theme_minimal() +
  geom_text_repel() +
  scale_color_manual(values=c("blue", "grey", "red")) +
  geom_vline(xintercept=c(-1, 1), col="black") +
  geom_hline(yintercept=-log10(0.05), col="black") +
  theme(text = element_text(size = 6))

# GO Enrichment Analysis (Fig. 2F, S5A-I)
BiocManager::install("org.Hs.eg.db")
BiocManager::install("clusterProfiler")
BiocManager::install("gseaplot2")
library(tidyverse)
library(Seurat)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(AnnotationDbi)
library(enrichplot)
library(biomaRt)
library(gseaplot2)

mart <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
results <- getBM(attributes = c("entrezgene_id", "external_gene_name"),
                 filters = "external_gene_name", 
                 values = rownames(Treg.de),
                 mart = mart)
results %>% head

Treg.de$gene <- rownames(Treg.de) 

Treg.de<- left_join(Treg.de, results, by = c("gene" = "external_gene_name")) %>% 
  filter(!is.na(entrezgene_id)) %>% 
  filter(!is.na(p_val))

Treg.de.sig <- dplyr::filter(Treg.de, p_val < 0.05, abs(avg_log2FC) > 1)

egotregs <- enrichGO(gene = Treg.de.sig$entrezgene_id,
                     keyType = "ENTREZID",
                     OrgDb = org.Hs.eg.db,
                     ont = "BP",
                     pAdjustMethod = "BH",
                     pvalueCutoff = 0.05,
                     qvalueCutoff = 0.05,
                     readable = TRUE)

ego.tabletregs <- as.data.frame(egotregs)
barplot(egotregs, showCategory=10)

#GSEA (Fig. 2G)
Treg.de <- Treg.de[order(-Treg.de$avg_log2FC), ]

gene_list <- Treg.de2$avg_log2FC
names(gene_list) <- Treg.de$entrezgene_id

gsetregs <- gseGO(geneList=gene_list,
                  ont = "BP",
                  keyType = "ENTREZID",
                  minGSSize = 3,
                  pvalueCutoff = 0.05,
                  verbose = TRUE,
                  OrgDb = "org.Hs.eg.db",
                  pAdjustMethod = "none")

gse.tabletregs <- as.data.frame(gsetregs) %>% 
  mutate(geneSetID = 1:dim(.)[1])
gseaplot2(gsetregs, geneSetID = c(16,15,10,8))

# Cell Chat analysis (Fig 5-6)
devtools::install_github("sqjin/CellChat")
BiocManager::install("ComplexHeatmap")
BiocManager::install("BiocNeighbors")
library(devtools)
library(CellChat)
library(Seurat)
library(reticulate)
library(tidyverse)
library(Seurat)
library(BiocManager)
library(Matrix)
library(RCurl)
library(readxl)
library(scales)
library(ggpubr)
library(data.table)
library(AnnotationHub)
library(ensembldb)
library(HGNChelper)
library(clusterProfiler)
library(AnnotationDbi)
library(biomaRt)
library(enrichplot)
library(ggplot2)

# Cell Chat object HC
Idents(integrate.filtered.PSAHC) <- "Sample_Name"
seurat_objectHC <- subset(integrate.filtered.PSAHC, idents = c("HC"))
data.inputHC <-GetAssayData(JoinLayers(seurat_objectHC, assay ="RNA", slot = "data"))
metaHC <- data.frame(group = seurat_objectHC$customclassif, row.names = names(labels))
cellchatHC <- createCellChat(object = data.inputHC, meta =  metaHC, group.by = "group")
# Cell Chat object PSA
seurat_objectPSA <- subset(integrate.filtered.PSAHC, idents = c("PSA"))
data.inputPSA <-GetAssayData(JoinLayers(seurat_objectPSA, assay ="RNA", slot = "data"))
metaPSA <- data.frame(group = seurat_objectPSA$customclassif, row.names = names(labels))
cellchatPSA <- createCellChat(object = data.inputPSA, meta =  metaPSA, group.by = "group")


# Cell Chat Databases
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB.human)
# show structure of databases
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.human <-CellChatDB.human
# set all cellchat db for cell-cell communications 
CellChatDB.use <- CellChatDB.human

# Inference of cell-cell communication network analysis
library(CellChat)
library(patchwork)
library(circlize)
options(stringsAsFactors = FALSE)

cellchatHC@DB <- CellChatDB.use
cellchatPSA@DB <- CellChatDB.use

cellchatHC<-subsetData(cellchatHC)
cellchatPSA<-subsetData(cellchatPSA)

cellchatHC <- identifyOverExpressedGenes(cellchatHC)
cellchatHC<-identifyOverExpressedInteractions(cellchatHC)
cellchatPSA <- identifyOverExpressedGenes(cellchatPSA)
cellchatPSA<-identifyOverExpressedInteractions(cellchatPSA)

# Project gene expression data onto protein-protein interaction (PPI)
cellchatHC<- projectData(cellchatHC, PPI.human)
cellchatPSA<- projectData(cellchatPSA, PPI.human)

# Compute the communication probability and infer cellular communication network
cellchatHC <- computeCommunProb(cellchatHC, raw.use = FALSE)
cellchatPSA <- computeCommunProb(cellchatPSA, raw.use = FALSE)

# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchatHC<-filterCommunication(cellchatHC, min.cells = 3)
cellchatPSA<-filterCommunication(cellchatPSA, min.cells = 3)

# Infer the cell-cell communication at a signaling pathway level
cellchatHC<-computeCommunProbPathway(cellchatHC)
cellchatPSA<-computeCommunProbPathway(cellchatPSA)

# Calculate the aggregated cell-cell communication network
cellchatHC<-aggregateNet(cellchatHC)
cellchatHC@net$count
cellchatHC@net$weight

cellchatPSA<-aggregateNet(cellchatPSA)
cellchatPSA@net$count
cellchatPSA@net$weight

# Visualisation of cell-cell communication network
cellchatHC@netP[["pathways"]]
cellchatPSA@netP[["pathways"]]
pathwaysHC <- cellchatHC@netP[["pathways"]]
pathwaysPSA <- cellchatPSA@netP[["pathways"]]

extractEnrichedLR(cellchatHC, signaling = c(cellchatHC@netP[["pathways"]]),
                  geneLR.return = TRUE)
extractEnrichedLR(cellchatPSA, signaling = c(cellchatPSA@netP[["pathways"]]),
                  geneLR.return = TRUE)


# Bubbleplot: show all LR pairs from source to target cell groups (Fig. 6F)
netVisual_bubble(cellchatHC, sources.use = c(16), targets.use = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15),
                 signaling = c("pathwaysHC"),
                 remove.isolate = F)
netVisual_bubble(cellchatPSA, sources.use = c(16), targets.use = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15),
                 signaling = c("pathwaysPSA"),
                 remove.isolate = F)


# Systematic analysis of cell-cell communication networks
library(NMF)
library(ggalluvial)
library(CellChat)

# Compute the network centrality scores
cellchatHC <- netAnalysis_computeCentrality(cellchatHC, slot.name = "netP")
cellchatPSA <- netAnalysis_computeCentrality(cellchatPSA, slot.name = "netP")

# Heatmap to visualise dominant cell types for each signaling pathway (Fig. 6A-D)
netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", height = 11)
netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", height = 11)

netAnalysis_signalingRole_heatmap(cellchatHC, pattern = "outgoing", height = 11)
netAnalysis_signalingRole_heatmap(cellchatHC, pattern = "incoming", height = 11)

netAnalysis_signalingRole_heatmap(cellchatPSA, pattern = "outgoing", height = 11)
netAnalysis_signalingRole_heatmap(cellchatPSA, pattern = "incoming", height = 11)

# Identify and visualise outgoing/incoming communication pattern of secreting cells
library(ggalluvial)

# HC
selectK(cellchatHC, pattern = "outgoing")
nPatterns = 2
cellchatHC <- identifyCommunicationPatterns(cellchatHC, pattern = "outgoing",
                                            k = nPatterns, width = 5, height = 9)

selectK(cellchatHC, pattern = "incoming")
nPatterns = 2
cellchatHC <- identifyCommunicationPatterns(cellchatHC, pattern = "incoming",
                                            k = nPatterns, width = 5, height = 9)

# PSA
selectK(cellchatPSA, pattern = "outgoing")
nPatterns = 3
cellchatPSA <- identifyCommunicationPatterns(cellchatPSA, pattern = "outgoing",
                                             k = nPatterns, width = 5, height = 9)

selectK(cellchatPSA, pattern = "incoming")
nPatterns = 2
cellchatPSA <- identifyCommunicationPatterns(cellchatPSA, pattern = "incoming",
                                             k = nPatterns, width = 5, height = 9)

